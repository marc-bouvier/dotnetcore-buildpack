#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### ============================================
###
###            Scalingo Buildpack
###            - DotNet
###            - NodeJs
###            - FluentMigrator
###
### ============================================

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

if [ "$STACK" == "cedar-14" ]; then
	echo "cedar-14 isn't supported"
	exit 1
fi

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
OUTPUT_DIR=${OUTPUT_DIR:-scalingo_output}

mkdir -p $BUILD_DIR/.profile.d
cp $BP_DIR/profile/* $BUILD_DIR/.profile.d/

### Load dependencies
source $BP_DIR/lib/utils

export_env_dir "$ENV_DIR"
export NUGET_XMLDOC_MODE=${NUGET_XMLDOC_MODE:-skip}
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=${DOTNET_SKIP_FIRST_TIME_EXPERIENCE:-1}
export DOTNET_CLI_TELEMETRY_OPTOUT=${DOTNET_CLI_TELEMETRY_OPTOUT:-1}

DOTNET_SDK_VERSION=${DOTNET_SDK_VERSION:-5.0.402}
DOTNET_RUNTIME_VERSION=${DOTNET_RUNTIME_VERSION:-5.0.11}

BUILD_CONFIGURATION=${BUILD_CONFIGURATION:-Release}

info "Installing Volta & nodeJs"
### Set the VOLTA_HOME variable to $HOME/.volta
### Add $VOLTA_HOME/bin to the beginning of your PATH variable

curl https://get.volta.sh | bash

export PATH="${HOME}/.volta/bin:${PATH}"
if [ -z ${NODEJS_VERSION:-} ]; then
	NODEJS_VERSION=v16
fi
volta install node@$NODEJS_VERSION

info "Installing dotnet"
install_dotnet $BUILD_DIR $CACHE_DIR $DOTNET_SDK_VERSION $DOTNET_RUNTIME_VERSION

info "Installing dotnet for FluentMigrator"
# Additional Dotnet sdk is installed because FluentMigrator does not support Dotnet 6.0 SDK yet
# https://github.com/fluentmigrator/fluentmigrator/issues/1544
install_dotnet $BUILD_DIR $CACHE_DIR $DOTNET_SDK_VERSION $DOTNET_RUNTIME_VERSION

export PATH="${BUILD_DIR}/.scalingo/dotnet:${PATH}"

cd $BUILD_DIR

if [ -z ${PROJECT_FILE:-} ]; then
        # search for the first subproject with Startup.cs or Program.cs or Program.fs file
	# set it as PROJECT_FILE
	PROJECT_FILE=$(x=$(dirname $(find ${BUILD_DIR} -maxdepth 5 -iname Startup.cs -o -iname Program.cs -o -iname Program.fs | head -1)); while [[ "$x" =~ $BUILD_DIR ]] ; do find "$x" -maxdepth 1 -name *.fsproj -o -name *.csproj; x=`dirname "$x"`; done)
fi

topic "Project File"
info $PROJECT_FILE

if [ -z ${PROJECT_NAME:-} ]; then
	PROJECT_NAME=$(basename ${PROJECT_FILE%.*})
fi

topic "Project Name"
info $PROJECT_NAME

if [ -n "$(cat $PROJECT_FILE | grep 'netcoreapp2.0')" ]; then
	topic "WARNING"
	info "For netcoreapp2.0 use https://github.com/edouard-mangel/dotnetcore-buildpack#v2.1.200" | indent
	info "More info https://github.com/edouard-mangel/dotnetcore-buildpack/issues/44" | indent
fi
export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"
topic "DB Update"
dotnet ef database update --project ${PROJECT_NAME}

info "publish ${PROJECT_FILE} for ${BUILD_CONFIGURATION} on ${OUTPUT_DIR}"
dotnet publish $PROJECT_FILE --output ${BUILD_DIR}/${OUTPUT_DIR} --configuration ${BUILD_CONFIGURATION} --runtime linux-x64

if [ -f ${BUILD_DIR}/Procfile ]; then
	topic "WARNING"
	echo "Be careful with custom Procfile" | indent
else
	echo "Add web process to Procfile" | indent
	cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/scalingo_output && ./${PROJECT_NAME}
EOT
fi

if [ -n ${SCALINGOISH:-""} ]; then
	echo "Override Procfile for scalingoish" | indent
	echo "web: \$HOME/scalingo_output/${PROJECT_NAME}" > ${BUILD_DIR}/Procfile
fi
